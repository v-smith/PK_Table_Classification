from data_loaders.table_data_loaders import process_table_data
import json
from torch import tensor

training_data = [{"html": """<!DOCTYPE html><html><body><h4>PK Parameters for OLZ After Single‐Dose Administration of ALKS 3831 (10 mg OLZ/10 mg SAM), OLZ (10 mg OLZ), or B‐OLZ (10 mg OLZ)</h4><head><style> table, th, td {border: 1px solid black;}</style></head><body><table xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" frame="hsides" rules="groups"><col align="left" span="1"/><col align="center" span="1"/><col align="center" span="1"/><col align="center" span="1"/><thead><tr style="border-bottom:solid 1px #000000"><th align="left" rowspan="1" colspan="1">Parameter Statistics</th><th align="center" rowspan="1" colspan="1">ALKS 3831 (n = 46)</th><th align="center" rowspan="1" colspan="1">OLZ (n = 45)</th><th align="center" rowspan="1" colspan="1">B‐OLZ (n = 48)</th></tr></thead><tbody><tr><td align="left" rowspan="1" colspan="1">C<sub>max</sub>, ng/mL</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Mean (SD)</td><td align="center" rowspan="1" colspan="1">16.6 (4.5)</td><td align="center" rowspan="1" colspan="1">16.7 (4.2)</td><td align="center" rowspan="1" colspan="1">16.6 (3.8)</td></tr><tr><td align="left" rowspan="1" colspan="1">t<sub>max</sub>, h</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Median (min–max)</td><td align="center" rowspan="1" colspan="1">7.0 (2.0–16.0)</td><td align="center" rowspan="1" colspan="1">5.0 (2.0–12.0)</td><td align="center" rowspan="1" colspan="1">5.0 (2.0–12.0)</td></tr><tr><td align="left" rowspan="1" colspan="1">t<sub>lag</sub>, h</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Median (min–max)</td><td align="center" rowspan="1" colspan="1">0.5 (0.0–0.6)</td><td align="center" rowspan="1" colspan="1">0.5 (0.0–1.0)</td><td align="center" rowspan="1" colspan="1">0.5 (0.0–1.0)</td></tr><tr><td align="left" rowspan="1" colspan="1">t<sub>½</sub>, h</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Mean (SD)</td><td align="center" rowspan="1" colspan="1">34.7 (9.2)</td><td align="center" rowspan="1" colspan="1">34.7 (11.0)</td><td align="center" rowspan="1" colspan="1">34.5 (8.7)</td></tr><tr><td align="left" rowspan="1" colspan="1">AUC<sub>0‐t</sub>, ng·h/mL</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Mean (SD)</td><td align="center" rowspan="1" colspan="1">610.6 (215.7)</td><td align="center" rowspan="1" colspan="1">599.1 (187.8)</td><td align="center" rowspan="1" colspan="1">594.3 (190.8)</td></tr><tr><td align="left" rowspan="1" colspan="1">AUC<sub>0‐∞</sub>, ng·h/mL</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Mean (SD)</td><td align="center" rowspan="1" colspan="1">652.0 (226.5)</td><td align="center" rowspan="1" colspan="1">629.2 (205.0)</td><td align="center" rowspan="1" colspan="1">632.6 (197.2)</td></tr><tr><td align="left" rowspan="1" colspan="1">CL/F, L/h</td><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/><td align="center" rowspan="1" colspan="1"/></tr><tr><td style="padding-left:10%" align="left" rowspan="1" colspan="1">Mean (SD)</td><td align="center" rowspan="1" colspan="1">17.2 (6.0)</td><td align="center" rowspan="1" colspan="1">18.2 (8.3)</td><td align="center" rowspan="1" colspan="1">17.4 (5.8)</td></tr></tbody></table></body></html>""",
                  "accept": [0, 4, 5], "_task_hash": 123, '_input_hash': 123},
                 {"html": """<!DOCTYPE html><html><body><h4>Pharmacokinetic profile of oral buparlisib in adult Japanese patients with advanced solid tumors in Cycle 1</h4><head><style> table, th, td {border: 1px solid black;}</style></head><body><table xmlns:ali="http://www.niso.org/schemas/ali/1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:mml="http://www.w3.org/1998/Math/MathML" frame="hsides" rules="groups"><thead><tr><th align="left" rowspan="1" colspan="1">Dose (mg/day)</th><th align="center" rowspan="1" colspan="1">Day</th><th align="center" rowspan="1" colspan="1"><italic>n</italic></th><th align="center" rowspan="1" colspan="1"><italic>T</italic><sub>max</sub> (h)</th><th align="center" rowspan="1" colspan="1"><italic>C</italic><sub>max</sub> (ng/mL)</th><th align="center" rowspan="1" colspan="1">AUC<sub>0–24</sub> (ng<sup>*</sup>h/mL)</th><th align="center" rowspan="1" colspan="1">T<sub>1/2</sub> (h)†</th><th align="center" rowspan="1" colspan="1">Racc</th></tr></thead><tbody><tr><td align="left" rowspan="3" colspan="1">25</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.00</td><td align="center" rowspan="1" colspan="1">289 (45)</td><td align="center" rowspan="1" colspan="1">2060 (474)</td><td align="center" rowspan="1" colspan="1">36.8 (9.2)</td><td align="center" rowspan="1" colspan="1">—</td></tr><tr><td align="center" rowspan="1" colspan="1">8</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.00</td><td align="center" rowspan="1" colspan="1">549 (275)</td><td align="center" rowspan="1" colspan="1">4640 (1230)</td><td align="center" rowspan="1" colspan="1">43.8 (NR)</td><td align="center" rowspan="1" colspan="1">2.25 (0.15)</td></tr><tr><td align="center" rowspan="1" colspan="1">28</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.00</td><td align="center" rowspan="1" colspan="1">530 (131)</td><td align="center" rowspan="1" colspan="1">6800 (3040)</td><td align="center" rowspan="1" colspan="1">NR</td><td align="center" rowspan="1" colspan="1">3.20 (0.67)</td></tr><tr><td align="left" rowspan="3" colspan="1">50</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.02</td><td align="center" rowspan="1" colspan="1">595 (212)</td><td align="center" rowspan="1" colspan="1">3830 (834)</td><td align="center" rowspan="1" colspan="1">NR</td><td align="center" rowspan="1" colspan="1">—</td></tr><tr><td align="center" rowspan="1" colspan="1">8</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.10</td><td align="center" rowspan="1" colspan="1">738 (221)</td><td align="center" rowspan="1" colspan="1">9550 (3200)</td><td align="center" rowspan="1" colspan="1">NR</td><td align="center" rowspan="1" colspan="1">2.58 (1.16)</td></tr><tr><td align="center" rowspan="1" colspan="1">28</td><td align="center" rowspan="1" colspan="1">3</td><td align="center" rowspan="1" colspan="1">1.50</td><td align="center" rowspan="1" colspan="1">767 (121)</td><td align="center" rowspan="1" colspan="1">11400 (3320)</td><td align="center" rowspan="1" colspan="1">NR</td><td align="center" rowspan="1" colspan="1">3.09 (1.29)</td></tr><tr><td align="left" rowspan="3" colspan="1">100</td><td align="center" rowspan="1" colspan="1">1</td><td align="center" rowspan="1" colspan="1">9</td><td align="center" rowspan="1" colspan="1">1.50</td><td align="center" rowspan="1" colspan="1">1080 (331)</td><td align="center" rowspan="1" colspan="1">8800 (1530)</td><td align="center" rowspan="1" colspan="1">30.6 (9.6)</td><td align="center" rowspan="1" colspan="1">—</td></tr><tr><td align="center" rowspan="1" colspan="1">8</td><td align="center" rowspan="1" colspan="1">7</td><td align="center" rowspan="1" colspan="1">1.02</td><td align="center" rowspan="1" colspan="1">1930 (560)</td><td align="center" rowspan="1" colspan="1">24300 (6190)</td><td align="center" rowspan="1" colspan="1">39.5 (25.2)</td><td align="center" rowspan="1" colspan="1">2.78 (0.66)</td></tr><tr><td align="center" rowspan="1" colspan="1">28</td><td align="center" rowspan="1" colspan="1">9</td><td align="center" rowspan="1" colspan="1">2.98</td><td align="center" rowspan="1" colspan="1">1790 (503)</td><td align="center" rowspan="1" colspan="1">25000 (7950)</td><td align="center" rowspan="1" colspan="1">41.8 (16.9)</td><td align="center" rowspan="1" colspan="1">2.87 (0.83)</td></tr></tbody></table></body></html>""",
                  "accept": [0, 4, 5, 6, 7], "_task_hash": 1234, '_input_hash': 1234}]

expected_output = [{'input_ids': tensor([1920, 2845, 1024, 1437, 217, 231, 843, 1439, 909, 1640, 358, 2046,
                                         2888, 1504, 670, 843, 217, 216, 224, 829, 197, 1424, 1275, 867,
                                         1437, 217, 231, 188, 644, 867, 909, 206, 218, 1194, 1437, 217,
                                         231, 1275, 867, 1437, 217, 231, 1194, 1041, 1067, 358, 4769, 231,
                                         1275, 867]), 'labels': tensor([1., 0., 0., 0., 1., 1., 0., 0., 0.])},
                   {'input_ids': tensor([3772, 709, 2872, 3258, 670, 1999, 655, 258, 1835, 439, 256, 942,
                                         716, 1152, 3413, 411, 3324, 1319, 1085, 1152, 259, 1864, 720, 713,
                                         3361, 256, 716, 821, 2449, 525, 2987, 1616, 1287, 182, 2419, 898,
                                         1061, 873, 4110, 821, 873, 1327, 182, 2634, 2899, 1463, 183, 1604,
                                         182, 1061]), 'labels': tensor([1., 0., 0., 0., 1., 1., 1., 1., 0.])}]

with open("../config/config_tableclass_FFNN.json") as config:
    cf = json.load(config)


def test_process_table_data():
    torch_dataset = process_table_data(inp_samples=training_data,
                                       inp_tokenizer="../tokenizers/tokenizerPKtablesSpecialTokens5000.json",
                                       max_len=50,
                                       dataset_name="testing",
                                       remove_html=True,
                                       baseline_only=True,
                                       remove_5s=False, mutli_hot=False, sections=False, aug_all=False, aug_syns=False,
                                       aug_nums=False, aug_both=False)

    for expected, reality in zip(expected_output, torch_dataset):
        assert expected["input_ids"].tolist() == reality["input_ids"].tolist()
        assert expected["labels"].tolist() == reality["labels"].tolist()
